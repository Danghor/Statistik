chooseMoivre := procedure(n, k) {
    pi := mathConst("Pi");
    return sqrt(2/(pi*n)) * 2.0**n * exp(-(k-n/2)**2 / (n/2));
};
choose  := [n,k] |-> n! / (k! * (n-k)!);

logNFactorial := procedure(n) {
    pi := mathConst("Pi");
    return 1/2 * log(2*pi*n) + n * log(n) - n;
};
chooseStirling := procedure(n, k) {
    return exp(logNFactorial(n) - logNFactorial(k) - logNFactorial(n-k));
};
n := 1000;
k :=  500;
approxStirling := chooseStirling(n, k);
approxMoivre   := chooseMoivre(n, k);
exact          := choose(n, k);
errorStirling  := (approxStirling - exact) / exact;
errorMoivre    := (approxMoivre   - exact) / exact;
print("Stirling approximation for ($n$ choose $k$) = ", approxStirling);
print("Moivre   approximation for ($n$ choose $k$) = ", approxMoivre);
print("exact                      ($n$ choose $k$) = ", exact);
print("relative error for Stirling approximation: ", errorStirling);
print("relative error for Moivre   approximation: ", errorMoivre);

laplace := procedure(n, k, p) {
    pi := mathConst("Pi");
    return exp(-(k-n*p)**2/(2*n*p*(1-p)))/sqrt(2*pi*n*p*(1-p));
};
approx := laplace(n, k, 0.5);
exact  := choose(n, k) * 0.5 ** n;
error  := (approx - exact) / exact;
print("approximation for Bin($n$, $k$, 0.5) = ", approx);
print("exact             Bin($n$, $k$, 0.5) = ", exact);
print("relative error: ", error);
